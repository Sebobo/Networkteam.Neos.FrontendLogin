##
# "LoginForm" element, extending "Plugin"
#
prototype(Networkteam.Neos.FrontendLogin:LoginForm) {
    settings = ${Configuration.setting('Networkteam.Neos.FrontendLogin')}

    redirectAfterLoginUri = Neos.Fusion:Case {
        refererIsSetAndValid {
            condition = ${request.httpRequest.arguments['referer'] && Networkteam.Neos.FrontendLogin.Hash.validate(request.httpRequest.arguments['referer'])}
            renderer = ${request.httpRequest.arguments['referer']}
        }
        default {
            condition = ${true}
            renderer = Neos.Neos:NodeUri {
                node = ${q(node).context({inaccessibleContentShown: true}).property('redirectAfterLogin')}
                @process.hmac = ${Networkteam.Neos.FrontendLogin.Hash.appendHmac(value)}
            }
        }
    }

    redirectAfterLogoutUri = Neos.Neos:NodeUri {
        node = ${q(node).context({inaccessibleContentShown: true}).property('redirectAfterLogout')}
        @process.hmac = ${Networkteam.Neos.FrontendLogin.Hash.appendHmac(value)}
    }


    account = ${Security.account}

    @cache {
        mode = 'dynamic'
        context {
            1 = 'node'
            2 = 'documentNode'
            3 = 'site'
        }
        entryDiscriminator = ${request.httpRequest.methodSafe ? 'static' : false}
    }
}

# caching configuration
prototype(Neos.Fusion:GlobalCacheIdentifiers) {
    refererArgument = ${request.httpRequest.arguments.referer}
}